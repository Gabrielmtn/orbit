/*
  Orbit

  Orbit is an experimental stylesheet for creating orbital effects. I've tried to comment the code the best I can to make it easy to tweak here and there. The best thing to do though is experiment and change things to achieve the desired effects you want.

*/

// Orbit needs a container to sit in. This becomes relavant when dealing with different viewport sizes. The container dimensions are also used to calculate the size of our orbit wrappers in this foundation. You are of course free to size them however you like and experiment to achieve different effects.
@orbitContainerHeight: 200px;
@orbitContainerWidth: 400px;
// The planet width is calculated in a way such that each will be of equal size in order to calculate an accurate width for the container. You could use this as a wrapper and then have different sizes for content or just override it completely and set an overflow hidden on the container.
@planetWidth: @orbitContainerWidth / ((@magnitudes * 2) + 1);

// These variables determine what is created and the magnitudes of what is created.
@magnitudes: 4; // Defines the amount of levels that are created. ie. the levels of height, width and depth that are created.
@durations: 10; // Defines the limit of duration that can be set for animation duration.
@delays: 10; // Defines a limit on length of delay you can apply to an orbit.
@orbitDepth: 1000px; //The depth must be defined in pixels. Defines the Z axis depth for Orbit.
@orbitDepthOffset: 0px; // You can set an offset so that it doesn't feel like things are orbiting towards you and are instead more contained.
@orbitHeightOffset: 0px;
@orbitWidthOffset: 0px;
// The orbit width and height defines the maximum width and height of orbit respectively for an orbiting element. I've chosen to go with magnitude multiplied by 100% to try and work towards a responsive solution. Note, I'm using translateX and translateY so 100% translation equates in pixels to the height and width of the orbiting element.
@orbitWidth: (@orbitContainerWidth / 2) - @planetWidth;
@orbitHeight: (@orbitContainerHeight / 2) - @planetWidth;


// These variables define animation styles for orbit. May look to introduce different animation durations for planets and delays.
@orbitPerspective: 600px;
@orbitDuration: 3s;
@orbitTransformStyle: preserve-3d;

.orbit {
  position: relative;
  height: @orbitContainerHeight;
  width: @orbitContainerWidth;
  max-width: 100%;
  perspective: @orbitPerspective;
  margin:  0 0 0 0;
  padding: 0 0 0 0;
  list-style: none;
  text-align: center;
  overflow: hidden;
}
.orbit .planet {
  position: absolute;
  left:50%;
  top: 50%;
  width: @planetWidth;
  height: @planetWidth;
  font-size: @planetWidth;
  margin-top: -(@planetWidth / 2);
  margin-left: -(@planetWidth / 2);
  list-style: none;
  text-align: center;
  transform-style: @orbitTransformStyle;
  animation-duration: @orbitDuration;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  animation-fill-mode: both;
  transform-origin: center;
}
.genDurations(@n, @i:1) when (@i <= @n) {
  .orbit .planet[data-orbit-duration="@{i}"] {
    animation-duration: (@i * 1s);
  }
  .genDurations(@n, (@i + 1));
}
.genDurations(@durations);

.genDelays(@n, @i:1) when (@i <= @n) {
  .orbit .planet[data-orbit-delay="@{i}"] {
    animation-delay: (@i * 1s);
  }
  .genDelays(@n, (@i + 1));
}
.genDelays(@delays);

// The element being orbited.
.orbit .planet.center {
  transform: translateZ(0 - @orbitDepthOffset) translateX(0 -@orbitWidthOffset) translateY(0 - @orbitHeightOffset);
  z-index: @magnitudes;
}

// Enables elements to be paused on hover(tap on mobile)
.orbit [pause-on-hover].planet:not(.center):hover {
  animation-play-state: paused;
}

// Orbit is mostly implemented using a series of loops based on the range of magnitudes (or number of planets) you wish to use.
// It calculates all the different combinations of depth, width, and height to give a range of combinations that can be used.
.genHeight(@magnitudes);
.genWidth(@magnitudes);
.genDepth(@magnitudes);
.generateCombos(@magnitudes);
.generateTernaryCombos(@magnitudes);
//  It first, generates the different mark up combinations and the animation names required. After, it then generates the different keyframes to be used.
.genDepth(@n, @i:1) when (@i <= @n) {
  .orbit .planet[data-orbit-depth="@{i}"] {
    animation-name: ~'goDeep@{i}';
  }
  @keyframes ~'goDeep@{i}' {
    @depth: (@orbitDepth / @magnitudes) * @i;
    .orbit(@depth, 0, 0, @i);
  }
  .genDepth(@n, (@i + 1));
}

.genHeight(@n, @i:1) when (@i <= @n) {
  .orbit .planet[data-orbit-height="@{i}"] {
    animation-name: ~'goHigh@{i}';
  }
  @keyframes ~'goHigh@{i}' {
    @height: (@orbitHeight) * @i;
    .orbit(0, 0, @height, 0);
  }
  .genHeight(@n, (@i + 1));
}

.genWidth(@n, @i:1) when (@i <= @n) {
  .orbit .planet[data-orbit-width="@{i}"] {
    animation-name: ~'goWide@{i}';
  }
  @keyframes ~'goWide@{i}' {
    @width: (@orbitWidth/@magnitudes) * @i;
    .orbit(0, @width, 0, 0);
  }
  .genWidth(@n, (@i + 1));
}


// Once we've done singular keyframes then we must think about when we have two attributes defined.
.generateCombos(@n, @i:1) when (@i <= @n) {
  .genCombo(@i);
  .genComboOrbits(@i);
  .generateCombos(@n, (@i + 1));
}

.genCombo(@n, @i: 1) when (@i <= @n) {
  .orbit .planet[data-orbit-width="@{n}"][data-orbit-height="@{i}"] {
    animation-name: ~'goWide@{n}High@{i}';
  }
  .orbit .planet[data-orbit-width="@{n}"][data-orbit-depth="@{i}"] {
    animation-name: ~'goWide@{n}Deep@{i}';
  }
  .orbit .planet[data-orbit-height="@{n}"][data-orbit-width="@{i}"] {
    animation-name: ~'goHigh@{n}Wide@{i}';
  }
  .orbit .planet[data-orbit-height="@{n}"][data-orbit-depth="@{i}"] {
    animation-name: ~'goHigh@{n}Deep@{i}';
  }
  .orbit .planet[data-orbit-depth="@{n}"][data-orbit-height="@{i}"] {
    animation-name: ~'goDeep@{n}High@{i}';
  }
  .orbit .planet[data-orbit-depth="@{n}"][data-orbit-width="@{i}"] {
    animation-name: ~'goDeep@{n}Wide@{i}';
  }
  .genCombo(@n, (@i + 1));
}
// combo orbit keyframes becomes a little more complicated
.genComboOrbits(@n, @i: 1) when (@i <= @n) {
  @keyframes ~'goWide@{n}High@{i}' {
    @height: (@orbitHeight/@magnitudes) * @i;
    @width: (@orbitWidth/@magnitudes) * @n;
    .orbit(0, @width, @height, 0);
  }
  @keyframes ~'goWide@{n}Deep@{i}' {
    @depth: (@orbitDepth/@magnitudes) * @i;
    @width: (@orbitWidth/@magnitudes) * @n;
    .orbit(@depth, @width, 0, @i);
  }
  @keyframes ~'goHigh@{n}Wide@{i}' {
    @height: (@orbitHeight/@magnitudes) * @n;
    @width: (@orbitWidth/@magnitudes) * @i;
    .orbit(0, @width, @height, 0);
  }
  @keyframes ~'goHigh@{n}Deep@{i}' {
    @height: (@orbitHeight/@magnitudes) * @n;
    @depth: (@orbitDepth/@magnitudes) * @i;
    .orbit(@depth, 0, @height, @i);
  }
  @keyframes ~'goDeep@{n}High@{i}' {
    @height: (@orbitHeight/@magnitudes) * @i;
    @depth: (@orbitDepth/@magnitudes) * @n;
    .orbit(@depth, 0, @height, @n);
  }
  @keyframes ~'goDeep@{n}Wide@{i}' {
    @depth: (@orbitDepth/@magnitudes) * @n;
    @width: (@orbitWidth/@magnitudes) * @i;
    .orbit(@depth, @width, 0, @n);
  }
  .genComboOrbits(@n, (@i + 1));
}

// Lastly, we generate the triple combos where we have three attributes defined.
// It requires three levels of looping in order to achieve this. Not ideal but I still wouldn't want to write it all by hand.
.genTernaryDeep(@turn, @round) {
  .genDeep(@n, @i: 1) when (@i <= @n) {
    .orbit .planet[data-orbit-width="@{turn}"][data-orbit-height="@{n}"][data-orbit-depth="@{i}"] {
      animation-name: ~'goWide@{turn}High@{n}Deep@{i}';
    }
    .orbit .planet[data-orbit-width="@{turn}"][data-orbit-depth="@{n}"][data-orbit-height="@{i}"] {
      animation-name: ~'goWide@{turn}Deep@{n}High@{i}';
    }

    .orbit .planet[data-orbit-height="@{turn}"][data-orbit-width="@{n}"][data-orbit-depth="@{i}"] {
      animation-name: ~'goHigh@{turn}Wide@{n}Deep@{i}';
    }
    .orbit .planet[data-orbit-height="@{turn}"][data-orbit-depth="@{n}"][data-orbit-width="@{i}"] {
      animation-name: ~'goHigh@{turn}Deep@{n}Wide@{i}';
    }

    .orbit .planet[data-orbit-depth="@{turn}"][data-orbit-height="@{n}"][data-orbit-width="@{i}"] {
      animation-name: ~'goDeep@{turn}High@{n}Wide@{i}';
    }
    .orbit .planet[data-orbit-depth="@{turn}"][data-orbit-width="@{n}"][data-orbit-height="@{i}"] {
      animation-name: ~'goDeep@{turn}Wide@{n}High@{i}';
    }
    .genDeep(@n, (@i + 1));
  }
  .genDeep(@round);
}

.genTernary(@n, @i: 1) when (@i <= @n) {
  .genTernaryDeep(@n, @i);
  .genTernary(@n, (@i + 1));
}

.generateTernaryCombos(@n, @i: 1) when (@i <= @n) {
  .genTernary(@i);
  .genTernaryOrbit(@i);
  .generateTernaryCombos(@n, (@i + 1));
}
.genTernaryOrbit(@n, @i: 1) when (@i <= @n) {
  .genTernaryOrbitDeep(@n, @i);
  .genTernaryOrbit(@n, (@i + 1));
}
.genTernaryOrbitDeep(@turn, @round) {
  .genOrbitDeep(@n, @i: 1) when (@i <= @n) {
    @keyframes ~'goWide@{turn}High@{n}Deep@{i}' {
      @depth: (@orbitDepth/@magnitudes) * @i;
      @width: (@orbitWidth/@magnitudes) * @turn;
      @height: (@orbitHeight/@magnitudes) * @n;
      .orbit(@depth, @width, @height, @i);
    }
    @keyframes ~'goWide@{turn}Deep@{n}High@{i}' {
      @depth: (@orbitDepth/@magnitudes) * @n;
      @width: (@orbitWidth/@magnitudes) * @turn;
      @height: (@orbitHeight/@magnitudes) * @i;
      .orbit(@depth, @width, @height, @n);
    }
    @keyframes ~'goHigh@{turn}Wide@{n}Deep@{i}' {
      @depth: (@orbitDepth/@magnitudes) * @i;
      @width: (@orbitWidth/@magnitudes) * @n;
      @height: (@orbitHeight/@magnitudes) * @turn;
      .orbit(@depth, @width, @height, @i);
    }
    @keyframes ~'goHigh@{turn}Deep@{n}Wide@{i}' {
      @depth: (@orbitDepth/@magnitudes) * @n;
      @width: (@orbitWidth/@magnitudes) * @i;
      @height: (@orbitHeight/@magnitudes) * @turn;
      .orbit(@depth, @width, @height, @n);
    }
    @keyframes ~'goDeep@{turn}High@{n}Wide@{i}' {
      @depth: (@orbitDepth/@magnitudes) * @turn;
      @width: (@orbitWidth/@magnitudes) * @i;
      @height: (@orbitHeight/@magnitudes) * @n;
      .orbit(@depth, @width, @height, @turn);
    }
    @keyframes ~'goDeep@{turn}Wide@{n}High@{i}' {
      @depth: (@orbitDepth/@magnitudes) * @turn;
      @width: (@orbitWidth/@magnitudes) * @n;
      @height: (@orbitHeight/@magnitudes) * @i;
      .orbit(@depth, @width, @height, @turn);
    }
    .genOrbitDeep(@n, (@i + 1));
  }
  .genOrbitDeep(@round);
}

// This orbit mixin is what defines the various keyframes for the different combinations for orbiting elements.
.orbit(@depth, @width, @height, @z) {
    // To correctly work out z-indexing issues. The center will have z-index of the levels and then + or - the depth level.
    0% {
      transform: translateZ((@depth / 2) - @orbitDepthOffset) translateX(0 - @orbitWidthOffset) translateY(@height - @orbitHeightOffset);
      z-index: @magnitudes + @z;
    }
    25% {
      transform: translateZ(0 - @orbitDepthOffset) translateX(@width - @orbitWidthOffset) translateY(0 - @orbitHeightOffset);
      z-index: @magnitudes;
    }
    50% {
      transform: translateZ((-@depth / 2) - @orbitDepthOffset) translateX(0 - @orbitWidthOffset) translateY(-@height - @orbitHeightOffset);
      z-index: @magnitudes - @z;
    }
    75% {
      transform: translateZ(0 - @orbitDepthOffset) translateX(-@width - @orbitWidthOffset) translateY(0 - @orbitHeightOffset);
      z-index: @magnitudes;
    }
    100% {
      transform: translateZ((@depth / 2) - @orbitDepthOffset) translateX(0 - @orbitWidthOffset) translateY(@height - @orbitHeightOffset);
      z-index: @magnitudes + @z;
    }
}
